<project name="Build specific targets and properties" default="noDefault">

	<!-- Name of the distribution file -->
	<property name="dist.filename" value="V1EclipsePlugin.zip"/>
	<!-- Subdirecotry used to create distribution -->
	<property name="dist.dir" value="${buildDirectory}/dist"/>
	<!-- Directory where documentation is created -->
	<property name="doc.dir" value="${dist.dir}/doc"/>
	<!-- subdirectory used to create update site -->
	<property name="UpdateSiteStagingLocation" value="${dist.dir}/updatesite"/>
	
	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- Add on <ant> task for each top level element being built. -->
	<!-- ===================================================================== -->
	<property name="allElementsFile" value="${builder}/allElements.xml"/>
	<import file="${allElementsFile}"/>
	<target name="allElements">
		<antcall target="allElementsDelegator"/>
	</target>

	<!-- ===================================================================== -->
	<!-- ===================================================================== -->
	<target name="getBaseComponents" depends="checkLocalBase" unless="skipBase">
		<get src="${eclipseBaseURL}" dest="${buildDirectory}/../temp-base.zip"/>
		<unzip dest="${base}" overwrite="true" src="${buildDirectory}/../temp-base.zip"/>
	</target>

	<target name="checkLocalBase">
		<available file="${base}" property="skipBase"/>
	</target>

	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for mapsCheckoutTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles" depends="checkLocalMaps" unless="skipMaps">
		<property name="mapsCheckoutTag" value="HEAD"/>
		<svn javahl="false">
			<export srcurl="${maps.URL}" revision="${maps.revision}"
				destpath="${buildDirectory}/maps" force="true"/>
		</svn>
	</target>

	<target name="checkLocalMaps">
		<available property="skipMaps" file="${buildDirectory}/maps"/>
	</target>

	<target name="tagMapFiles" if="tagMaps">
		<!--		<cvs dest="${buildDirectory}/maps/${mapsRoot}" command="tag ${mapsTagTag}"/> -->
	</target>

	<!-- ===================================================================== -->

	<target name="clean" unless="noclean">
		<antcall target="allElements">
			<param name="target" value="cleanElement"/>
		</antcall>
	</target>

	<target name="gatherLogs">
		<mkdir dir="${buildDirectory}/${buildLabel}/compilelogs"/>
		<antcall target="allElements">
			<param name="target" value="gatherLogs"/>
		</antcall>
		<unzip dest="${buildDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features">
				<include name="**/*.log.zip"/>
			</fileset>
		</unzip>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup"> </target>

	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
		<antcall target="getBaseComponents"/>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch"> </target>

	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch"> </target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate"> </target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
		<antcall target="clean"/>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess"> </target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess"> </target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running assemble. -->
	<!-- ===================================================================== -->
	<target name="preAssemble"> </target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running assemble. -->
	<!-- ===================================================================== -->
	<target name="postAssemble"> </target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running package. -->
	<!-- ===================================================================== -->
	<target name="prePackage"> 
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running package. -->
	<!-- ===================================================================== -->
	<target name="postPackage">
		<antcall target="gendoc"/>
		<antcall target="generateUpdateSite"/>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
<!--		<antcall target="test"/> -->
		<antcall target="publish" />
		<antcall target="gatherLogs"/>
	</target>	
	
	<!-- ===================================================================== -->
	<!-- Steps to do to test the build results -->
	<!-- ===================================================================== -->
	<target name="test">
		<echo message="Setting up tests in ${eclipseAutomatedTestHome}"/>
		<delete dir="${eclipseAutomatedTestHome}"/>
		<mkdir dir="${eclipseAutomatedTestHome}"/>
		<mkdir dir="${eclipseAutomatedTestWorkspace}"/>
		<unzip dest="${eclipseAutomatedTestHome}"
			src="${buildDirectory}/../eclipse/testImage/eclipse-java-europa-fall-win32.zip"/>
		<unzip dest="${eclipseAutomatedTestHome}" src="${builder}/${buildLabel}/${dist.filename}"/>
		<unzip dest="${eclipseAutomatedTestHome}"
			src="${builder}/${buildLabel}/com.versionone.v1.feature.test-${buildId}.zip"/>
		<copy file="${buildDirectory}/test.xml" tofile="${eclipseAutomatedTestHome}/test.xml"/>
		<copy todir="${eclipseAutomatedTestHome}/eclipse/plugins/org.eclipse.test">
			<fileset dir="c:/org.eclipse.test" />
		</copy>
		
		<property file="${buildDirectory}/test.properties"/>
		
		<ant antfile="${eclipseAutomatedTestHome}/test.xml" target="runtests"
			dir="${eclipseAutomatedTestHome}">
			<property name="os" value="${baseos}"/>
			<property name="ws" value="${basews}"/>
			<property name="arch" value="${basearch}"/>
			<property name="testPlugin" value="${com.versionone.common.test}"/>
			<property name="report" value="com.versionone.common.test"/>
			<property name="install" value="${eclipseAutomatedTestHome}"/>
		</ant>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to publish the build results -->
	<!-- ===================================================================== -->
	<target name="publish">	
		<!-- create the new zip -->
		<zip destfile="${builder}/${buildLabel}/${dist.filename}"
		     basedir="${dist.dir}"/>				
		<copy file="${builder}/${buildLabel}/${dist.filename}"
			tofile="${publish.dir}/${dist.filename}"/>
	</target>

	<!-- ===================================================================== -->
	<!-- Create the UpdateSite -->
	<!-- ===================================================================== -->
	<target name="generateUpdateSite">		
		<!-- Create the directory structure -->
		<mkdir dir="${UpdateSiteStagingLocation}"/>
		
		<!-- checkout the site.xml file -->
		<svn javahl="false">
			<export srcurl="${updatesite.URL}" revision="${updatesite.revision}"
				destpath="${UpdateSiteStagingLocation}" force="true"/>
		</svn>
		<delete file="${UpdateSiteStagingLocation}/.project"/>
		
		<!-- Put build results into directory-->
		<unzip src="${builder}/${buildLabel}/com.versionone.v1.feature-${buildId}.zip" dest="${UpdateSiteStagingLocation}"/>
		<move todir="${UpdateSiteStagingLocation}/features">
			<fileset dir="${UpdateSiteStagingLocation}/eclipse/features"/>
		</move>
		<move todir="${UpdateSiteStagingLocation}/plugins">
			<fileset dir="${UpdateSiteStagingLocation}/eclipse/plugins"/>
		</move>
		<delete dir="${UpdateSiteStagingLocation}/eclipse"/>		
	</target>

	<!-- ===================================================================== -->
	<!-- Create Documentation-->
	<!-- ===================================================================== -->		
	<macrodef name="gendoc.content.base">
		<attribute name="filename"/>
		<attribute name="collect.xref.targets"/>
		<attribute name="content.doc.output.dir" default="${doc.dir}/@{filename}"/>
		<sequential>
			<mkdir dir="@{content.doc.output.dir}"/>
			<echo>${doc.source.dir} [/] ${common.dir}/docbook/xsltproc/xsltproc.exe -o ../@{content.doc.output.dir}/@{filename}.html --stringparam current.docid ${filename} --stringparam target.database.document olinkdb.xml --stringparam collect.xref.targets ${collect.xref.targets} --stringparam targets.filename ${filename}.db Common/v1integration.xsl @{filename}/@{filename}.xml</echo>
			<exec dir="${doc.source.dir}" executable="${common.dir}/docbook/xsltproc/xsltproc.exe"
				failonerror="true">
				<arg
					line="-o @{content.doc.output.dir}/@{filename}.html --stringparam current.docid ${filename} --stringparam target.database.document olinkdb.xml --stringparam collect.xref.targets ${collect.xref.targets} --stringparam targets.filename ${filename}.db Common/v1integration.xsl @{filename}/@{filename}.xml"
				/>
			</exec>
		</sequential>
	</macrodef>

	<target name="gendoc">
		<property name="doc.source.dir" value="${buildDirectory}/DocSource"/>		
		<property name="common.dir" value="${doc.source.dir}/Common"/>
		
		<svn javahl="false">
			<export srcurl="${doc.URL}" revision="${doc.revision}"
				destpath="${doc.source.dir}" force="true"/>
		</svn>
		
		<delete dir="${doc.dir}/Common"/>
		<mkdir dir="${doc.dir}/Common"/>
		<copy file="${doc.source.dir}/Common/v1integration.css" todir="${doc.dir}/Common"/>
		
		<!-- this is the index file -->
		<echo>${doc.source.dir} [/] ${common.dir}/docbook/xsltproc/xsltproc.exe -o ../${doc.dir}/index.html Common/index.xsl index.xml</echo>
		<exec dir="${doc.source.dir}" executable="${common.dir}/docbook/xsltproc/xsltproc.exe"
			failonerror="true">
			<arg line="-o ${doc.dir}/index.html Common/index.xsl index.xml"/>
		</exec>
		
		<gendoc.content.base filename="V1EclipsePlugIn" collect.xref.targets="only"/>
		<gendoc.content.base filename="V1EclipsePlugIn" collect.xref.targets="no"/>
		
		<copy todir="${doc.dir}/V1EclipsePlugIn" flatten="false">
			<fileset dir="${doc.source.dir}/V1EclipsePlugIn">
				<include name="*.JPG" />
			</fileset>
		</copy>
	</target>	
	
	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file"/>
	</target>

</project>
